$my_variable = 'look, a string!'

cd /etc/puppetlabs/code/environments/production/modules
vim pasture/manifests/init.pp

Assign these variables at the top of your class. 
Replace the hard-coded references to the /etc/pasture_config.yaml
configuration filepath with the variable.

class pasture {

  $port                = '80'
  $default_character   = 'sheep'
  $default_message     = ''
  $pasture_config_file = '/etc/pasture_config.yaml'

  package { 'pasture':
    ensure   => present,
    provider => 'gem',
    before   => File[$pasture_config_file],
  }
  file { $pasture_config_file:
    source  => 'puppet:///modules/pasture/pasture_config.yaml',
    notify  => Service['pasture'],
  }
  file { '/etc/systemd/system/pasture.service':
    source => 'puppet:///modules/pasture/pasture.service',
    notify  => Service['pasture'],
  }
  service { 'pasture':
    ensure    => running,
  }
}

mkdir pasture/templates
Next, create a pasture_config.yaml.epp template file.

vim pasture/templates/pasture_config.yaml.epp

The beginning of your template should look like the following.
We'll explain the details of the syntax below.

<%- | $port,
      $default_character,
      $default_message,
| -%>

# This file is managed by Puppet. Please do not make manual
changes.  The bars (|) surrounding the list of parameters
are a special syntax that define the parameters tag.
The <% and %> are the opening and closing tag delimiters
that distinguish EPP tags from the body of the file.
Those hyphens (-) next to the tag delimiters will remove 
indentation and whitespace before and after the tag.
This allows you to put this parameter tag at the beginning
of the file, for example, without the newline character
after the tag creating an empty line at the beginning
of the output file.

Next, we'll use the variables we set up to define values 
for the port and character configuration options.

<%- | $port,
      $default_character,
      $default_message,
| -%>
# This file is managed by Puppet. Please do not make manual changes.
---
:default_character: <%= $default_character %>
:default_message:   <%= $default_message %>
:sinatra_settings:
  :port: <%= $port %>

vim pasture/manifests/init.pp

class pasture {

  $port                = '80'
  $default_character   = 'sheep'
  $default_message     = ''
  $pasture_config_file = '/etc/pasture_config.yaml'

  package { 'pasture':
    ensure   => present,
    provider => 'gem',
    before   => File[$pasture_config_file],
  }
  $pasture_config_hash = {
    'port'              => $port,
    'default_character' => $default_character,
    'default_message'   => $default_message,
  }
  file { $pasture_config_file:
    content => epp('pasture/pasture_config.yaml.epp', $pasture_config_hash),
    notify  => Service['pasture'],
  }
  file { '/etc/systemd/system/pasture.service':
    source => 'puppet:///modules/pasture/pasture.service',
    notify  => Service['pasture'],
  }
  service { 'pasture':
    ensure    => running,
  }
}

cp pasture/files/pasture.service pasture/templates/pasture.service.epp

vim pasture/templates/pasture.service.epp
Add your parameters tag and comment to the beginning of the file. Set the --config_file argument of the start command to the value of $pasture_config_file

<%- | $pasture_config_file = '/etc/pasture_config.yaml' | -%>
# This file is managed by Puppet. Please do not make manual changes.
[Unit]
Description=Run the pasture service

[Service]
Environment=RACK_ENV=production
ExecStart=/usr/local/bin/pasture start --config_file <%= $pasture_config_file %>

[Install]
WantedBy=multi-user.target

vim pasture/manifests/init.pp

class pasture {

  $port                = '80'
  $default_character   = 'sheep'
  $default_message     = ''
  $pasture_config_file = '/etc/pasture_config.yaml'

  package { 'pasture':
    ensure   => present,
    provider => 'gem',
    before   => File[$pasture_config_file],
  }
  $pasture_config_hash = {
    'port'              => $port,
    'default_character' => $default_character,
    'default_message'   => $default_message,
  }
  file { $pasture_config_file:
    content => epp('pasture/pasture_config.yaml.epp', $pasture_config_hash),
    notify  => Service['pasture'],
  }
  $pasture_service_hash = {
    'pasture_config_file' => $pasture_config_file,
  }
  file { '/etc/systemd/system/pasture.service':
    content => epp('pasture/pasture.service.epp', $pasture_service_hash),
    notify  => Service['pasture'],
  }
  service { 'pasture':
    ensure    => running,
  }
}

puppet parser validate pasture/manifests/init.pp

ssh learning@pasture.puppet.vm
sudo puppet agent -t

exit
curl 'pasture.puppet.vm/api/v1/cowsay?message=Hello!'
